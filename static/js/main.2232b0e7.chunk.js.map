{"version":3,"sources":["Components/DeleteBtn.js","Components/AllLocationUsers.js","App.js","index.js"],"names":["ButtonContainer","styled","div","Button","button","ButtonText","span","DeleleteBtn","userInfo","userIds","userIdxs","users","forEach","user","includes","id","push","userIdx","i","length","onClickDeleteBtn","a","axios","patch","status","then","response","console","log","catch","error","style","position","bottom","left","zIndex","display","flexDirection","map","onClick","className","color","fontWeight","fontSize","letterSpacing","RefetchBtn","AllLocationUsers","initMap","initCircle","isCircle","initPolygon","isPolygon","BaseURL","usersId","iconMarkerIn","L","Icon","iconUrl","iconRetinaUrl","iconAnchor","popupAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","Point","iconMarkerOut","random_rgb","o","Math","round","r","random","useAxios","data","loading","refetch","result","pathLines","index","obj","latitude","longitude","outOfRange","restrictStatus","inOfRange","useEffect","timer","setInterval","clearInterval","lat1","lng1","lat2","lng2","deg2rad","deg","PI","dLat","dLon","sin","cos","atan2","sqrt","getDistanceFromLatLonInKm","lat","lon","radius","Marker","icon","Popup","createdAt_location","idIndex","arr","line","Object","keys","Polyline","positions","ChangeOptionsBtn","ShapeOptions","CircleBtn","PolygonBtn","App","useForm","register","handleSubmit","useState","setIsCircle","setIsPolygon","zoom","maxZoom","setInitMap","attribution","url","tileSize","zoomOffset","initTileLayer","fillOpacity","setInitCircle","path","setInitPolygon","initCenterMarker","setInitCenterMarker","iconCenter","onClickReset","window","location","reload","MapContainer","center","TileLayer","Circle","Polygon","trigger","onSubmit","alert","placeholder","type","value","lat3","lon3","lat4","lon4","lat5","lon5","lon1","lon2","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2232b0e7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\n\r\nconst ButtonContainer = styled.div``;\r\n\r\nconst Button = styled.button`\r\n  padding: 10px 50px;\r\n`;\r\n\r\nconst ButtonText = styled.span``;\r\n\r\nconst DeleleteBtn = ({ userInfo }) => {\r\n  //   console.log(userInfo);\r\n  let userIds = [];\r\n  let userIdxs = [];\r\n  let users = [];\r\n  const BaseURL = \"https://www.gpsdemo.shop/\";\r\n\r\n  userInfo.forEach((user) => {\r\n    //아이디, 인덱스 뽑아내기\r\n    if (!userIds.includes(user.id)) userIds.push(user.id);\r\n    if (!userIdxs.includes(user.userIdx)) userIdxs.push(user.userIdx);\r\n  });\r\n\r\n  for (let i = 0; i < userIds.length; i++) {\r\n    users.push([userIds[i], userIdxs[i]]);\r\n  }\r\n\r\n  const onClickDeleteBtn = async (userIdx) => {\r\n    await axios\r\n      .patch(`${BaseURL}locations/status/all`, {\r\n        userIdx: userIdx,\r\n        status: \"N\",\r\n      })\r\n      .then((response) => console.log(`delete ${userIdx}`))\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  return (\r\n    <ButtonContainer\r\n      style={{\r\n        position: \"absolute\",\r\n        bottom: \"50px\",\r\n        left: \"50px\",\r\n        zIndex: \"100\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      {users.map((user) => {\r\n        return (\r\n          <Button\r\n            onClick={() => onClickDeleteBtn(user[1])}\r\n            key={user[1]}\r\n            className=\"deleteBtn\"\r\n          >\r\n            <ButtonText>\r\n              Delete{\"  \"}\r\n              <span\r\n                style={{\r\n                  color: \"red\",\r\n                  fontWeight: \"bold\",\r\n                  fontSize: \"24px\",\r\n                  letterSpacing: \"1px\",\r\n                }}\r\n              >\r\n                {user[0]}\r\n              </span>\r\n              {\"  \"}\r\n              Locations\r\n            </ButtonText>\r\n          </Button>\r\n        );\r\n      })}\r\n    </ButtonContainer>\r\n  );\r\n};\r\n\r\nexport default DeleleteBtn;\r\n","import React, { useEffect } from \"react\";\r\nimport useAxios from \"axios-hooks\";\r\nimport axios from \"axios\";\r\nimport { Marker, Popup, Polyline } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport DeleleteBtn from \"./DeleteBtn\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ButtonContainer = styled.div`\r\n  position: absolute;\r\n  top: 80px;\r\n  right: 256px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst RefetchBtn = styled.button`\r\n  padding: 10px 50px;\r\n`;\r\n\r\nconst AllLocationUsers = ({\r\n  initMap,\r\n  initCircle,\r\n  initPolygon,\r\n  isCircle,\r\n  isPolygon,\r\n}) => {\r\n  const BaseURL = \"https://www.gpsdemo.shop/\";\r\n  const usersId = [];\r\n\r\n  // 범위 안의 마커\r\n  let iconMarkerIn = new L.Icon({\r\n    iconUrl:\r\n      \"https://user-images.githubusercontent.com/62231339/133370867-f3db9284-04b2-4900-beb7-ddcc15300eaf.png\",\r\n    iconRetinaUrl:\r\n      \"https://user-images.githubusercontent.com/62231339/133370867-f3db9284-04b2-4900-beb7-ddcc15300eaf.png\",\r\n    iconAnchor: null,\r\n    popupAnchor: [0, -15],\r\n    shadowUrl: null,\r\n    shadowSize: null,\r\n    shadowAnchor: null,\r\n    iconSize: new L.Point(18, 28),\r\n    className: \"leaflet-div-centerIcon\",\r\n  });\r\n\r\n  // 범위 밖의 마커\r\n  let iconMarkerOut = new L.Icon({\r\n    iconUrl:\r\n      \"https://user-images.githubusercontent.com/62231339/134607908-ab411f67-e183-4120-8f72-89b9016e56da.png\",\r\n    iconRetinaUrl:\r\n      \"https://user-images.githubusercontent.com/62231339/134607908-ab411f67-e183-4120-8f72-89b9016e56da.png\",\r\n    iconAnchor: null,\r\n    popupAnchor: [0, -20],\r\n    shadowUrl: null,\r\n    shadowSize: null,\r\n    shadowAnchor: null,\r\n    iconSize: new L.Point(70, 75),\r\n    className: \"leaflet-div-centerIcon\",\r\n  });\r\n\r\n  // 위도 경도로 거리 계산\r\n  const getDistanceFromLatLonInKm = (lat1, lng1, lat2, lng2) => {\r\n    function deg2rad(deg) {\r\n      return deg * (Math.PI / 180);\r\n    }\r\n\r\n    let R = 6371;\r\n    let dLat = deg2rad(lat2 - lat1);\r\n    let dLon = deg2rad(lng2 - lng1);\r\n    let a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(deg2rad(lat1)) *\r\n        Math.cos(deg2rad(lat2)) *\r\n        Math.sin(dLon / 2) *\r\n        Math.sin(dLon / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let d = R * c;\r\n    return d * 1000;\r\n  };\r\n\r\n  // 랜덤 색\r\n  const random_rgb = () => {\r\n    let o = Math.round,\r\n      r = Math.random,\r\n      s = 200;\r\n    return `rgb(${o(r() * s)}, ${o(r() * s)}, ${o(r() * s)})`;\r\n  };\r\n\r\n  // 위치정보값을 가지고 있는 유저 데이터\r\n  const [{ data, loading, error }, refetch] = useAxios(\r\n    `${BaseURL}users/all-location`\r\n  );\r\n\r\n  if (!loading && !error) {\r\n    data.result.forEach((user) => {\r\n      //아이디 뽑아내기\r\n      if (!usersId.includes(user.id)) usersId.push(user.id);\r\n    });\r\n  }\r\n\r\n  // Polyline을 위한 Array\r\n  // 0: {sam: Array(2)}\r\n  // 2: {woo: Array(2)}\r\n  let pathLines = [];\r\n  if (!loading && !error) {\r\n    data.result.forEach((user, index) => {\r\n      for (let i = 0; i < usersId.length; i++) {\r\n        if (usersId[i] === user.id) {\r\n          let obj = {};\r\n          obj[user.id] = [user.latitude, user.longitude];\r\n          pathLines.push(obj);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // 범위 밖 유저\r\n  const outOfRange = async (userIdx) => {\r\n    await axios\r\n      .patch(`${BaseURL}restricts/in-out`, {\r\n        userIdx: userIdx,\r\n        restrictStatus: \"N\",\r\n      })\r\n      .then((response) => console.log(\"out of range!\"))\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  // 범위 안 유저\r\n  const inOfRange = async (userIdx) => {\r\n    await axios\r\n      .patch(`${BaseURL}restricts/in-out`, {\r\n        userIdx: userIdx,\r\n        restrictStatus: \"Y\",\r\n      })\r\n      .then((response) => console.log(\"in range!\"))\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  // 1분마다 자동 refetch\r\n  useEffect(() => {\r\n    const timer = setInterval(() => refetch(), 100000);\r\n    return () => clearInterval(timer);\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {/* 범위 내에 있는지 밖에 있는지에 따라 마커, 팝업 변화 (원형일때)*/}\r\n      {!loading && !error && isCircle && !isPolygon\r\n        ? data.result.map((user, index) => {\r\n            if (\r\n              getDistanceFromLatLonInKm(\r\n                initMap.lat,\r\n                initMap.lon,\r\n                user.latitude,\r\n                user.longitude\r\n              ) > initCircle.radius\r\n            ) {\r\n              outOfRange(user.userIdx);\r\n              return (\r\n                <Marker\r\n                  key={index}\r\n                  position={[user.latitude, user.longitude]}\r\n                  icon={iconMarkerOut}\r\n                >\r\n                  <Popup>\r\n                    {user.createdAt_location}\r\n                    <br />\r\n                    <span\r\n                      style={{\r\n                        color: \"#26c6da\",\r\n                        fontSize: \"16px\",\r\n                        letterSpacing: \"2px\",\r\n                      }}\r\n                    >\r\n                      {user.id}\r\n                    </span>\r\n                    의 경로\r\n                    <br />\r\n                    <span style={{ color: \"red\", fontSize: \"16px\" }}>\r\n                      범위에서 벗어났습니다!\r\n                    </span>\r\n                  </Popup>\r\n                </Marker>\r\n              );\r\n            } else {\r\n              inOfRange(user.userIdx);\r\n              return (\r\n                <Marker\r\n                  key={index}\r\n                  position={[user.latitude, user.longitude]}\r\n                  icon={iconMarkerIn}\r\n                >\r\n                  <Popup>\r\n                    {user.createdAt_location}\r\n                    <br />\r\n                    <span\r\n                      style={{\r\n                        color: \"#26c6da\",\r\n                        fontSize: \"16px\",\r\n                        letterSpacing: \"2px\",\r\n                      }}\r\n                    >\r\n                      {user.id}\r\n                    </span>\r\n                    의 경로\r\n                  </Popup>\r\n                </Marker>\r\n              );\r\n            }\r\n          })\r\n        : null}\r\n\r\n      {/* 범위 내에 있는지 밖에 있는지에 따라 마커, 팝업 변화 (다각형일때)*/}\r\n      {!loading && !error && isPolygon && !isCircle ? null : null}\r\n\r\n      {/* 같은 ID끼리 새로운 배열 생성해서 PolyLine으로 return */}\r\n      {!loading && !error\r\n        ? usersId.map((id, idIndex) => {\r\n            let arr = [];\r\n            pathLines.map((line) => {\r\n              if (Object.keys(line)[0] === id)\r\n                arr.push(line[Object.keys(line)[0]]);\r\n            });\r\n            return (\r\n              <Polyline positions={arr} color={random_rgb()} key={idIndex} />\r\n            );\r\n          })\r\n        : null}\r\n\r\n      {/* 유저의 전체 경로 삭제 */}\r\n      {!loading && !error ? (\r\n        <DeleleteBtn className=\"deleteBtn\" userInfo={data.result} />\r\n      ) : null}\r\n\r\n      {/* 위치 정보값을 가진 유저의 데이터 갱신 */}\r\n      {!loading && !error ? (\r\n        <ButtonContainer>\r\n          <RefetchBtn className=\"fetchBtn\" onClick={refetch}>\r\n            Refetch Datas\r\n          </RefetchBtn>\r\n        </ButtonContainer>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AllLocationUsers;\r\n","import React, { useState } from \"react\";\nimport L from \"leaflet\";\nimport {\n  MapContainer,\n  TileLayer,\n  Circle,\n  Marker,\n  Polygon,\n} from \"react-leaflet\";\nimport { Popup as ReactPopup } from \"reactjs-popup\";\nimport { useForm } from \"react-hook-form\";\nimport styled from \"styled-components\";\nimport AllLocationUsers from \"./Components/AllLocationUsers\";\nimport \"reactjs-popup/dist/index.css\";\n// import \"leaflet-offline\";\n// import localforage from \"localforage\";\n\nconst ChangeOptionsBtn = styled.button`\n  position: absolute;\n  top: 130px;\n  right: 256px;\n  padding: 10px 42px;\n`;\n\nconst ShapeOptions = styled.div`\n  position: absolute;\n  top: 130px;\n  left: 160px;\n  display: flex;\n`;\n\nconst CircleBtn = styled.button`\n  padding: 10px 50px;\n  margin-right: 8px;\n`;\n\nconst PolygonBtn = styled.button`\n  padding: 10px 50px;\n`;\n\nconst App = () => {\n  const { register, handleSubmit } = useForm();\n\n  // 원형인지 다각형인지\n  const [isCircle, setIsCircle] = useState(true); // default는 원형\n  const [isPolygon, setIsPolygon] = useState(false);\n\n  const [initMap, setInitMap] = useState({\n    lat: 37.47386563818747,\n    lon: 127.14299349434039,\n    zoom: 16,\n    maxZoom: 16,\n  });\n\n  const [initTileLayer, setInitTileLayer] = useState({\n    attribution:\n      '&copy; <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors',\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    maxZoom: 16,\n    tileSize: 512,\n    zoomOffset: -1,\n  });\n\n  const [initCircle, setInitCircle] = useState({\n    lat: 37.47386563818747,\n    lon: 127.14299349434039,\n    fillOpacity: 0.3,\n    color: \"#00acc1\",\n    radius: 500,\n  });\n\n  const [initPolygon, setInitPolygon] = useState({\n    fillOpacity: 0.3,\n    color: \"#00acc1\",\n    path: [\n      [37.47856563818747, 127.14299349434039],\n      [37.47386563818747, 127.14850349434039],\n      [37.46976563818747, 127.14799349434039],\n      [37.46886563818747, 127.14199349434039],\n      [37.47386563818747, 127.13489349434039],\n    ],\n  });\n\n  const [initCenterMarker, setInitCenterMarker] = useState({\n    lat: 37.47386563818747,\n    lon: 127.14299349434039,\n  });\n\n  // 중심 마커\n  const iconCenter = new L.Icon({\n    iconUrl:\n      \"https://user-images.githubusercontent.com/62231339/134606859-120b96e3-15b7-4e66-b12f-16ceab80d6d4.png\",\n    iconRetinaUrl:\n      \"https://user-images.githubusercontent.com/62231339/134606859-120b96e3-15b7-4e66-b12f-16ceab80d6d4.png\",\n    iconAnchor: [25, 45],\n    popupAnchor: [0, 10],\n    shadowUrl: null,\n    shadowSize: null,\n    shadowAnchor: null,\n    iconSize: new L.Point(50, 60),\n    className: \"leaflet-div-centerIcon\",\n  });\n\n  // 오프라인에서도 가능하게 하기\n  // const offLineMap = () => {\n  //   const map = L.map(\"map-id\");\n  //   const offlineLayer = L.tileLayer.offline(\n  //     \"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n  //     localforage,\n  //     {\n  //       attribution:\n  //         '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n  //       subdomains: \"abc\",\n  //       minZoom: 13,\n  //       maxZoom: 16,\n  //       crossOrigin: true,\n  //     }\n  //   );\n  //   offlineLayer.addTo(map);\n  // };\n\n  // 원의 중심 위도/경도, 반지름 바꾸기\n  const onSubmitCircle = (data) => {\n    if (!data.lat || !data.lon || !data.radius)\n      alert(\"모든 항목을 채워야 합니다.\");\n\n    setInitMap({\n      lat: data.lat,\n      lon: data.lon,\n    });\n\n    setInitCircle({\n      lat: data.lat,\n      lon: data.lon,\n      radius: data.radius,\n    });\n\n    setInitCenterMarker({\n      lat: data.lat,\n      lon: data.lon,\n    });\n  };\n\n  // 다각형의 위도/경도 바꾸기\n  const onSubmitPolygon = (data) => {\n    if (!data.lat3 || !data.lon3)\n      alert(\"세번째 위도 경도까지는 채워야 합니다.\");\n\n    if (!data.lat4 && !data.lon4) {\n      setInitPolygon({\n        path: [\n          [data.lat1, data.lon1],\n          [data.lat2, data.lon2],\n          [data.lat3, data.lon3],\n        ],\n      });\n    } else if (!data.lat5 && !data.lon5) {\n      setInitPolygon({\n        path: [\n          [data.lat1, data.lon1],\n          [data.lat2, data.lon2],\n          [data.lat3, data.lon3],\n          [data.lat4, data.lon4],\n        ],\n      });\n    } else {\n      setInitPolygon({\n        path: [\n          [data.lat1, data.lon1],\n          [data.lat2, data.lon2],\n          [data.lat3, data.lon3],\n          [data.lat4, data.lon4],\n          [data.lat5, data.lon5],\n        ],\n      });\n    }\n  };\n\n  // reset하면 새로고침\n  const onClickReset = () => {\n    window.location.reload();\n  };\n\n  // useEffect(() => {\n  // }, []);\n\n  return (\n    <div className=\"App\">\n      <div id=\"map-id\">\n        <MapContainer\n          center={\n            [initMap.lat, initMap.lon]\n              ? [initMap.lat, initMap.lon]\n              : [37.47386563818747, 127.14299349434039]\n          }\n          zoom={initMap.zoom ? 16 : 16}\n          maxZoom={initMap.maxZoom}\n          id=\"map\"\n        >\n          <TileLayer\n            attribution={initTileLayer.attribution}\n            url={initTileLayer.url}\n            maxZoom={initTileLayer.maxZoom}\n            tileSize={initTileLayer.tileSize}\n            zoomOffset={initTileLayer.zoomOffset}\n          />\n\n          {/* 원형 / 다각형 선택 */}\n          {isCircle && !isPolygon ? (\n            <Circle\n              center={[initCircle.lat, initCircle.lon]}\n              color={initCircle.color}\n              radius={initCircle.radius}\n              fillOpacity={initCircle.fillOpacity}\n            />\n          ) : null}\n\n          {!isCircle && isPolygon ? (\n            <Polygon\n              color={initPolygon.color}\n              fillOpacity={initPolygon.fillOpacity}\n              positions={initPolygon.path}\n            />\n          ) : null}\n\n          {/* 중심 마커 */}\n          <Marker\n            position={[initCenterMarker.lat, initCenterMarker.lon]}\n            icon={iconCenter}\n          />\n\n          {/* 다른 지도 요소들 */}\n          <AllLocationUsers\n            initMap={initMap}\n            initCircle={initCircle}\n            initPolygon={initPolygon}\n            isCircle={isCircle}\n            isPolygon={isPolygon}\n            initCenterMarker={initCenterMarker}\n          ></AllLocationUsers>\n        </MapContainer>\n\n        {/* 원형일때의 팝업 : 다각형일때의 팝업 */}\n        {isCircle ? (\n          <ReactPopup\n            trigger={\n              <ChangeOptionsBtn className=\"optionsBtn\">\n                {\" \"}\n                Change Options\n              </ChangeOptionsBtn>\n            }\n            position=\"left center\"\n          >\n            <form\n              className=\"circleForm\"\n              onSubmit={handleSubmit(onSubmitCircle)}\n            >\n              <input\n                className=\"circleRow\"\n                {...register(\"lat\")}\n                placeholder=\"중심 위도\"\n              ></input>\n              <input\n                className=\"circleRow\"\n                {...register(\"lon\")}\n                placeholder=\"중심 경도\"\n              ></input>\n              <input\n                className=\"circleRow\"\n                {...register(\"radius\")}\n                placeholder=\"범위의 반지름\"\n              ></input>\n              <div className=\"mapOptionBtns\">\n                <input type=\"submit\" value=\"Change\"></input>\n                <button\n                  type=\"button\"\n                  className=\"resetBtn\"\n                  onClick={onClickReset}\n                >\n                  Reset\n                </button>\n              </div>\n            </form>\n          </ReactPopup>\n        ) : (\n          <ReactPopup\n            trigger={\n              <ChangeOptionsBtn className=\"optionsBtn\">\n                {\" \"}\n                Change Options\n              </ChangeOptionsBtn>\n            }\n            position=\"left center\"\n          >\n            <form\n              className=\"polygonForm\"\n              onSubmit={handleSubmit(onSubmitPolygon)}\n            >\n              <div className=\"inputRow\">\n                <input\n                  className=\"polygonRow\"\n                  {...register(\"lat1\")}\n                  placeholder=\"첫번째 위도\"\n                ></input>\n                <input\n                  className=\"polygonRow\"\n                  {...register(\"lon1\")}\n                  placeholder=\"첫번째 경도\"\n                ></input>\n              </div>\n              <div className=\"inputRow\">\n                <input\n                  className=\"polygonRow\"\n                  {...register(\"lat2\")}\n                  placeholder=\"두번재 위도\"\n                ></input>\n                <input\n                  className=\"polygonRow\"\n                  {...register(\"lon2\")}\n                  placeholder=\"두번재 경도\"\n                ></input>\n              </div>\n              <div className=\"inputRow\">\n                <input\n                  className=\"polygonRow\"\n                  {...register(\"lat3\")}\n                  placeholder=\"세번째 위도\"\n                ></input>\n                <input\n                  className=\"polygonRow\"\n                  {...register(\"lon3\")}\n                  placeholder=\"세번째 경도\"\n                ></input>\n              </div>\n              <div className=\"inputRow\">\n                <input\n                  className=\"polygonRow\"\n                  {...register(\"lat4\")}\n                  placeholder=\"네번째 위도\"\n                ></input>\n                <input\n                  className=\"polygonRow\"\n                  {...register(\"lon4\")}\n                  placeholder=\"네번째 경도\"\n                ></input>\n              </div>\n              <div className=\"inputRow\">\n                <input\n                  className=\"polygonRow\"\n                  {...register(\"lat5\")}\n                  placeholder=\"다섯번째 위도\"\n                ></input>\n                <input\n                  className=\"polygonRow\"\n                  {...register(\"lon5\")}\n                  placeholder=\"다섯번째 경도\"\n                ></input>\n              </div>\n\n              <div className=\"mapOptionBtns\">\n                <input type=\"submit\" value=\"Change\"></input>\n                <button\n                  type=\"button\"\n                  className=\"resetBtn\"\n                  onClick={onClickReset}\n                >\n                  Reset\n                </button>\n              </div>\n            </form>\n          </ReactPopup>\n        )}\n\n        {/* 원형인지 다각형인지 선택하는 버튼 */}\n        <ShapeOptions>\n          <CircleBtn\n            className=\"circleBtn\"\n            onClick={() => {\n              setIsCircle(true);\n              setIsPolygon(false);\n            }}\n          >\n            Circle Range\n          </CircleBtn>\n          <PolygonBtn\n            className=\"polygonBtn\"\n            onClick={() => {\n              setIsCircle(false);\n              setIsPolygon(true);\n            }}\n          >\n            Polygon Range\n          </PolygonBtn>\n        </ShapeOptions>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}